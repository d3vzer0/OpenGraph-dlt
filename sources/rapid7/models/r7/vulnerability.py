from pydantic import BaseModel, ConfigDict, PrivateAttr, Field
from datetime import datetime
from typing import Optional
from sources.rapid7.utils.lookup import LookupManager
from ..entries import Node, NodeProperties, Edge, EdgePath
from sources.rapid7.utils.guid import gen_guid


class Address(BaseModel):
    ip: str
    mac: str


class HostName(BaseModel):
    name: str
    source: str


class AssetVulnerability(BaseModel):
    model_config = ConfigDict(populate_by_name=True)
    id: str
    asset_id: int
    ip: str
    host_name: Optional[str] = Field(alias="hostName", default=None)
    host_names: Optional[list[HostName]] = Field(alias="hostNames", default=None)
    instances: int
    since: datetime
    status: str


class AssetVulnerabilityNode(BaseModel):
    _asset_vulnerability: AssetVulnerability = PrivateAttr()
    _lookup: LookupManager = PrivateAttr()

    @property
    def vulnerability_id(self):
        return gen_guid(
            self._asset_vulnerability.id,
            "R7Vulnerability",
        )

    def asset_object_id(self, host_name: str):
        if host_name not in self._lookup.queried_hosts:
            object_id = self._lookup.find_asset(host_name)
            self._lookup.queried_hosts[host_name] = object_id
            return object_id
        else:
            return self._lookup.queried_hosts[host_name]

    @property
    def edges(self) -> list[Edge]:
        vuln_edges = []
        if self._asset_vulnerability.host_names:
            host_name = self._asset_vulnerability.host_names[-1].name.upper()
            asset_id = self.asset_object_id(host_name)
            if asset_id:
                start_path = EdgePath(value=asset_id, match_by="id")
                end_path = EdgePath(value=self.vulnerability_id, match_by="id")
                vuln_edges.append(
                    Edge(start=start_path, end=end_path, kind="HasVulnerability")
                )

        return vuln_edges

    @classmethod
    def from_input(cls, *args, **kwargs) -> "AssetVulnerabilityNode":
        model = cls()
        model._asset_vulnerability = AssetVulnerability(**kwargs)
        return model


class CVSS(BaseModel):
    vector: str
    exploit_score: float = Field(alias="exploitScore")
    impact_score: float = Field(alias="impactScore")
    score: float


class Description(BaseModel):
    html: Optional[str] = None
    text: Optional[str] = None


class Vulnerability(BaseModel):
    model_config = ConfigDict(populate_by_name=True)
    id: str
    title: str
    added: datetime
    modified: datetime
    categories: Optional[list[str]] = None
    v2: Optional[CVSS] = None
    v3: Optional[CVSS] = None
    denial_of_service: bool = Field(alias="denialOfService")
    description: Description
    exploits: int
    malware_kits: int = Field(alias="malwareKits")
    fix_available: bool = Field(alias="fixAvailable")
    severity: str
    severity_score: float = Field(alias="severityScore")
    risk_score: float = Field(alias="riskScore")
    published: str
    cves: Optional[list[str]] = None


class VulnerabilityNodeProperties(NodeProperties):
    v2: Optional[str] = None
    v3: Optional[str] = None
    id: str
    title: str
    added: datetime
    modified: datetime
    categories: Optional[list[str]] = None
    denial_of_service: bool
    description: str
    exploits: int
    malware_kits: int
    fix_available: bool
    severity: str
    severity_score: float
    risk_score: float
    published: str


class VulnerabilityNode(Node):

    properties: VulnerabilityNodeProperties
    _lookup: LookupManager = PrivateAttr()

    @property
    def edges(self) -> list[Edge]:
        return []

    @classmethod
    def from_input(cls, *args, **kwargs) -> "VulnerabilityNode":
        model = Vulnerability(**kwargs)
        cvss3 = model.v3.vector if model.v3 else None
        cvss2 = model.v2.vector if model.v2 else None
        description = (
            model.description.text if model.description.text else model.description.html
        )
        base_properties = model.model_dump()
        base_properties.pop("v3", None)
        base_properties.pop("v2", None)
        base_properties.pop("description", None)
        properties = VulnerabilityNodeProperties(
            **base_properties,
            name=model.id,
            displayname=model.id,
            v3=cvss3,
            v2=cvss2,
            description=description,
        )
        return cls(properties=properties, kinds=["R7Vulnerability"])
